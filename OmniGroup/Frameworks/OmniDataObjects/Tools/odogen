#!/usr/bin/ruby

require 'getoptlong'
require 'pathname'
require 'fileutils'

$: << Pathname.new(File.dirname(__FILE__)).realpath
require 'OmniDataObjects'
include OmniDataObjects # Make the DSL live in our namespace

@@prog = File.basename(__FILE__)
def usage
  msg = <<EOS
#{@@prog} - Generate source files for an OmniDataObjects model.
usage: #{@@prog} [options] Foo.odomodel
    --help [-h]                   Print this help
    --debug [-d]                  Turn on debug output
    --output-directory [-D] dir   The directory in which to place output; normally it is placed as a sibling to the input
    --check [-C]                  The tool will not write any output, but instead will exit with an error if the output is not there or differs from the expected value.
EOS
  STDERR.print msg
  exit 1
end

options = GetoptLong.new(
[ "--help", "-h", GetoptLong::NO_ARGUMENT ],
[ "--debug", "-d", GetoptLong::NO_ARGUMENT ],
[ "--output-directory", "-D", GetoptLong::REQUIRED_ARGUMENT ],
[ "--check", "-C", GetoptLong::NO_ARGUMENT ]
)

output_directory = nil
options.each do |opt, arg|
  case opt
  when "--debug"
    OmniDataObjects::Options.debug = true
  when "--output-directory"
    output_directory = arg
  when "--check"
    OmniDataObjects::Options.check_only = true
  else
    usage()
  end
end

# The remaining arguments are assumed to be .odomodel files to evaluate.
# Each output is directed to the same directory as the input file
ARGV.each {|arg|
  path = Pathname.new(arg).realpath
  
  output = (output_directory || path.dirname.to_s)
  OmniDataObjects::Options.model_output_directory = output
  FileUtils.mkdir_p(output) unless OmniDataObjects::Options.check_only
  
  eval(File.read(path))
}
